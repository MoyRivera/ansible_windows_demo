{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmUsername": {
            "type": "string",
            "metadata": {
                "description": "User name for the user of Virtual Machine. Used for both Linux and Windows machines"
            },
            "defaultValue": "demouser"
        },
        "vmPassword": {
            "type": "securestring",
            "minLength": 12,
            "metadata": {
                "description": "Password for the user of agent Virtual Machine. Used for both Linux and Windows machines."
            },
            "defaultValue": "demoPassword1!"
        },
        "sshKeyData": {
            "type": "string",
            "metadata": {
                "description": "Enter ssh rsa public key file string data for connecting to Ansible Tower Installed VM."
            },
            "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCnLhLVpdGcmzf52edb/hb785nykojQ1CC1hRWqbxgzoTB+ZYSEV8YKdTgU/sk8EVopYEVyGBQXJo5TlW4r2FjHgDivPI50dSbq3ki27g3PacnyHw0Zbit8u1n5p8IeoutsArcTREXqnZLxn0B0DZORuLSzXRBIvGnIkw/uKZjk79XKCRnKGTk4V4ly4+OU0N/PrkRm1GJPbM8l0/aBaZoX4JUJt34JiCOMD42i8yH1RwmpOUV3uk8V+3uHLu1HvjQ3hwBtD2yD0KENpm9n4PlSldWkKze2qIcwijBjBWPg/rw9DaHTbJFjOEBq2+N/LB0/sRrX4TXPwppIQt+3B00lwAWvyzi+LEDQ6QehH1G/HGML5C0u7+m/BzdIQVUNAFsf53xjXDwaGYQsk4af3qKj5tamONaI7NFUlEAWDh8ePw2LHo9gYBzVoYXFMawJ6gsTu9CtwJfzflTz5hBeDPh1ptGygthqxOQQhcNp8DA8MFtHokO6ao2jfqW/B2RRpjG2PZMtnuf3lugNEw7364WmR2vY4PK3NtTTfeKpmW9dypQFeREVpaY7LTQeVCShdfyjhVwUykNw6B+GNmcqC0C+4Dc9xyQuq//5/z3g4AOZBwItcJpeDtWXMoZWFYWygKmST0/REpcCwkO/1iGRD+uFqIk7ZLz5EK7TJwgMZbDvDw== imported-openssh-key"
        },
        "ansibleTowerAdminPassword": {
            "type": "securestring",
            "minLength": 5,
            "metadata": {
                "description": "Password for ansible tower console admin"
            },
            "defaultValue": "password"
        },
        "ansibleTowerDatabasePassword": {
            "type": "securestring",
            "minLength": 5,
            "metadata": {
                "description": "Password for ansible tower database"
            },
            "defaultValue": "password"
        },
        "windowsClientCount": {
            "type": "int",
            "minValue": 1,
            "maxValue": 1,
            "defaultValue": 1,
            "metadata": {
                "description": "Number of Windows Ansible Clients to deploy. Deploys Windows Server 2016 or 2012."
            }

        },
        "linuxClientCount": {
            "type": "int",
            "minValue": 1,
            "maxValue": 1,
            "defaultValue": 1,
            "metadata": {
                "description": "Number of Linux Ansible Clients to deploy. Deploys RHEL 7.2 or CentOS 7.2"
            }
        },
        "linuxOS": {
            "type": "string",
            "allowedValues": ["CentOS", "RHEL"],
            "defaultValue": "RHEL",
            "metadata": {
                "description": "Select OS for Linux VMs including ansible Tower"
            }
        },
        "windowsOS": {
            "type": "string",
            "allowedValues": ["2012-R2-Datacenter", "2016-Datacenter"],
            "defaultValue": "2012-R2-Datacenter",
            "metadata": {
                "description": "Select OS for Windows Client VMs"
            }
        },
        "remoteAllowedCIDR": {
            "type": "string",
            "minLength": 1,
            "defaultValue": "0.0.0.0/0",
            "metadata": {
                "description": "Enter Public IP CIDR Allowed for accessing the deployment.Enter in 0.0.0.0/0 format. You can always modify these later in NSG Settings"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/SpektraSystems/ansible-testdrive/master/",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated.Leave blank if unsure"
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "RHEL": {
            "offer": "[parameters('linuxOS')]",
            "publisher": "RedHat"
        },
        "CentOS": {
            "offer": "[parameters('linuxOS')]",
            "publisher": "OpenLogic"
        },
        "rgName": "[resourceGroup().name]",
        "ansibleNsgName": "tower-nsg",
        "linuxAgentNsgName": "linux-agent-nsg",
        "windowsAgentNsgName": "windows-agent-nsg",
        "towerStorageName": "[concat('towerstor',uniqueString(resourceGroup().id))]",
        "linuxAgentStorageName": "[concat('linstor',uniqueString(resourceGroup().id))]",
        "windowsAgentStorageName": "[concat('winstor',uniqueString(resourceGroup().id))]",
        "diagStorageAccountName": "[concat('diagstor',uniqueString(resourceGroup().id))]",
        "storageAccountType": "Standard_GRS",
        "virtualNetworkName": "ansible-vnet",
        "linuxSubnetName": "linux-agent-subnet",
        "windowsSubnetName": "windows-agent-subnet",
        "towerSubnetName": "puppet-subnet",
        "addressPrefix": "10.0.0.0/16",
        "towerSubnetPrefix": "10.0.1.0/24",
        "linuxSubnetPrefix": "10.0.2.0/24",
        "linuxPrivateIpAddressStart": "10.0.2.2",
        "windowsSubnetPrefix": "10.0.3.0/24",
        "winPrivateIpAddressStart": "10.0.3.2",
        "publicIPAddressNameTower": "tower-pip",
        "publicIPAddressNameWinAgent": "winagent-pip",
        "publicIPAddressNameLinAgent": "linagent-pip",
        "dnsNameTower": "[concat('tower',uniqueString(resourceGroup().id))]",
        "dnsNameWinAgent": "[concat('winagent',uniqueString(resourceGroup().id))]",
        "dnsNameLinAgent": "[concat('linagent',uniqueString(resourceGroup().id))]",
        "towerNicName": "ansible-tower-nic",
        "towerVmName": "vm-ansible-tower",
        "vmWinAgentName": "vm-windows-agent",
        "vmLinAgentName": "vm-linux-agent",
        "vmWinAgentNicName": "vm-windows-agent-nic-",
        "vmLinAgentNicName": "vm-linux-agent-nic-",
        "vmStorageAccountContainerName": "vhds",
        "sshKeyPath": "[concat('/home/',parameters('vmUsername'),'/.ssh/authorized_keys')]",
        "scriptFileName": "installansibletowerscript.sh",
        "scriptFileName1": "linuxclientvmscript.sh",
        "scriptStart": "su -c'sh ",
        "scriptStart1": "su -c'sh ",
        "customScriptCommand": "[concat(variables('scriptStart'), variables('scriptFileName'), ' ')]",
        "customScriptCommand1": "[concat(variables('scriptStart1'), variables('scriptFileName1'), ' ')]",
        "scriptClose": "'",
        "redHatTags": {
            "type": "object",
            "provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
        },
        "quickstartTags": {
            "type": "object",
            "name": "ansible-tower-rhel"
        }
    },
    "resources": [{
            "type": "Microsoft.Compute/availabilitySets",
            "name": "tower-avset",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This availability set will consist of ansible tower installed virtual machine",
            "tags": {
                "displayName": "Availability Set Ansible Tower",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {}
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "agent-avset",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This availability set will consist of windows and linux virtual machines configured as puppet agents ",
            "tags": {
                "displayName": " Agents Availability Set",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {}
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('ansibleNsgName')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This will have firewall rules for Ansible Tower Virtual machine",
            "tags": {
                "displayName": "Tower NSG",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "securityRules": [{
                        "name": "allow-80",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "80",
                            "direction": "Inbound",
                            "priority": 201,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow-8080",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "8080",
                            "direction": "Inbound",
                            "priority": 202,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow-443",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 203,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 200,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('linuxAgentNsgName')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This will have firewall rules for linux puppet agents",
            "tags": {
                "displayName": "Linux Agent NSG",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "securityRules": [{
                        "name": "allow-80",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "80",
                            "direction": "Inbound",
                            "priority": 301,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow-8080",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "8080",
                            "direction": "Inbound",
                            "priority": 302,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allow-443",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 303,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "default-allow-ssh",
                        "properties": {
                            "access": "Allow",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 300,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('windowsAgentNsgName')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This will have firewall rules for windows puppet agents",
            "tags": {
                "displayName": "Windows Agent NSG",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "securityRules": [

                    {
                        "name": "allow-8080",
                        "properties": {
                            "description": "Allow 8080",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 121,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-80",
                        "properties": {
                            "description": "Allow 80",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "rdp",
                        "properties": {
                            "description": "Allow RDP",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3389",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "WinRm",
                        "properties": {
                            "description": "Allow WinRM",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "5986",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 102,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "https",
                        "properties": {
                            "description": "HTTPS",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "[parameters('remoteAllowedCIDR')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 103,
                            "direction": "Inbound"
                        }
                    }

                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('towerStorageName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This storage account is used to store the VM disks of ansible tower vm",
            "tags": {
                "displayName": "Ansible Tower Storage Account",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "accountType": "[variables('StorageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('linuxAgentStorageName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This storage account is used to store the VM disks of RHEL Ansible agent vms",
            "tags": {
                "displayName": "Linux Agent Storage Account",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('windowsAgentStorageName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This storage account is used to store the VM disks of windows Aan agent vms",
            "tags": {
                "displayName": "Windows Agent Storage Account",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('diagStorageAccountName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This storage account is used for diagnostic data for all vms",
            "tags": {
                "displayName": "Diagnostics Storage Account",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This Virtual Network contains all the VMs needed",
            "tags": {
                "displayName": "Puppet Virtual Network",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('ansibleNsgName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('linuxAgentNsgName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('windowsAgentNsgName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [{
                        "name": "[variables('towerSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('towerSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups',  variables('ansibleNsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('windowsSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('windowsSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('windowsAgentNsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('linuxSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('linuxSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('linuxAgentNsgName'))]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressNameTower')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This Public IP is used by the Ansible Tower installed VM",
            "tags": {
                "displayName": "Public IP - Ansible Tower",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsNameTower')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('publicIPAddressNameWinAgent'),copyIndex(1))]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This Public IP is used by the Windows Client VMs",
            "tags": {
                "displayName": "Public IP - Windows Agent",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "windowsClientCount",
                "count": "[parameters('windowsClientCount')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsNameWinAgent'),copyIndex(1))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[concat(variables('publicIPAddressNameLinAgent'),copyIndex(1))]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This Public IP is used by the Linux Client VMs",
            "tags": {
                "displayName": "Public IP - Linux Agent",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "linuxAgentNicLoop",
                "count": "[parameters('linuxClientCount')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsNameLinAgent'),copyIndex(1))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('towerNicName')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This NIC will be used by ansible tower vm",
            "tags": {
                "displayName": "Ansible Tower NIC",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameTower'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "privateIPAllocationMethod": "Static",
                        "privateIPAddress": "10.0.1.21",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameTower'))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/',variables('virtualNetworkName'),variables('towerSubnetName'))]"
                        }
                    }
                }]
            }
        },

        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('vmLinAgentNicName'),copyIndex(1))]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "These NIC's will be used by linux agent vms",
            "tags": {
                "displayName": "Linux Agent NICs",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "linuxAgentNicLoop",
                "count": "[parameters('linuxClientCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameLinAgent'),copyIndex(1))]"

            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "privateIPAllocationMethod": "Static",
                        "privateIPAddress": "[concat(variables('linuxPrivateIpAddressStart'),copyIndex(1))]",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressNameLinAgent'),copyIndex(1)))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/',variables('virtualNetworkName'),variables('linuxSubnetName'))]"
                        }
                    }
                }]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('vmWinAgentNicName'),copyIndex(1))]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "These NIC's will be used by windows agent vms",
            "tags": {
                "displayName": "Windows Agent NICs",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "windowsAgentNicLoop",
                "count": "[parameters('windowsClientCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressNameWinAgent'),copyIndex(1))]"
            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "privateIPAllocationMethod": "Static",
                        "privateIPAddress": "[concat(variables('winPrivateIpAddressStart'),copyIndex(1))]",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressNameWinAgent'),copyIndex(1)))]"
                        },
                        "subnet": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/',variables('virtualNetworkName'),variables('windowsSubnetName'))]"
                        }
                    }
                }]
            }
        },

        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('towerVmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This vm will be used as ansible tower",
            "tags": {
                "displayName": "Ansible Tower VM",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('towerStorageName'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmWinAgentName'),'1'))]",
                "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('vmLinAgentName'),'1'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('towerNicName'))]"
            ],

            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'tower-avset')]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_D2_v2"
                },
                "osProfile": {
                    "computerName": "[variables('towerVmName')]",
                    "adminUsername": "[parameters('vmUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [{
                                "path": "[variables('sshKeyPath')]",
                                "keyData": "[parameters('sshKeyData')]"
                            }]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "OpenLogic",
                        "offer": "CentOS",
                        "sku": "7.2",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('towerStorageName')),'2015-06-15').primaryEndpoints.blob,variables('vmStorageAccountContainerName'),'/OSDisk','.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('towerNicName'))]"
                    }]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')),'2015-06-15').primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('towerVmName'),'/CustomScriptAnsible')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This Script will wait untill Ansible Tower gets installed",
            "tags": {
                "displayName": "Ansible Tower VM Extension",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('towerVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(parameters('_artifactslocation'),'scripts/', variables('scriptFileName'),parameters('_artifactsLocationSasToken'))]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('customScriptCommand'), parameters('ansibleTowerAdminPassword'),' ',parameters('ansibleTowerDatabasePassword'),' ',parameters('vmUsername'),' ',parameters('vmPassword'),' ',reference(concat(variables('vmLinAgentNicName'),'1')).ipConfigurations[ 0 ].properties.privateIPAddress,' ',variables('rgName'), variables('scriptClose') )]"

                }
            }
        },

        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('vmWinAgentName'),copyIndex(1))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "These vms will be used as Windows ansible clients",
            "tags": {
                "displayName": "Windows Agent VMs",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "windowsAgentVmLoop",
                "count": "[parameters('windowsClientCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('windowsAgentStorageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('vmWinAgentNicName'),copyIndex(1))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'agent-avset')]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_D1_v2"
                },
                "osProfile": {
                    "computerName": "[concat('vmWinAgent',copyIndex(1))]",
                    "adminUsername": "[parameters('vmUsername')]",
                    "adminPassword": "[parameters('vmPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "[parameters('windowsOS')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat('vmWinAgent',copyIndex(1),'os-disk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('windowsAgentStorageName')),'2015-06-15').primaryEndpoints.blob,variables('vmStorageAccountContainerName'),'/','vmWinAgent',copyIndex(1),'os-disk','.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmWinAgentNicName'),copyIndex(1)))]"
                    }]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')),'2015-06-15').primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('vmLinAgentName'),copyIndex(1))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "These vms will be used as Ansible clients",
            "tags": {
                "displayName": "Linux Agent VMs",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "redhatAgentVmLoop",
                "count": "[parameters('linuxClientCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('linuxAgentStorageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('vmLinAgentNicName'),copyIndex(1))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'agent-avset')]"
                },
                "hardwareProfile": {

                    "vmSize": "Standard_D1_v2"
                },
                "osProfile": {
                    "computerName": "[concat(variables('vmLinAgentName'),copyIndex(1))]",
                    "adminUsername": "[parameters('vmUsername')]",
                    "adminPassword": "[parameters('vmPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables(parameters('linuxOS')).publisher]",
                        "offer": "[variables(parameters('linuxOS')).offer]",
                        "sku": "7.2",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat('vmLinAgent',copyIndex(1),'os-disk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('linuxAgentStorageName')),'2015-06-15').primaryEndpoints.blob,variables('vmStorageAccountContainerName'),'/','vmLinAgent',copyIndex(1),'os-disk','.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmLinAgentNicName'),copyIndex(1)))]"
                    }]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName')),'2015-06-15').primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmLinAgentName'),copyIndex(1),'/CustomScriptAnsibleLinux')]",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "comments": "This Script will wait untill Ansible Tower gets installed",
            "tags": {
                "displayName": "Ansible Linux Client VM Extension",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmLinAgentName'),copyIndex(1))]"
            ],
            "copy": {
                "name": "linuxAgentVmLoop",
                "count": "[parameters('linuxClientCount')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(parameters('_artifactslocation'),'scripts/', variables('scriptFileName1'),parameters('_artifactsLocationSasToken'))]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('customScriptCommand1'),' ',parameters('vmUsername'),variables('scriptClose'))]"

                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmWinAgentName'),copyIndex(1),'/CustomScriptAnsibleWindows')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "comments": "This Script will allow Ansible Tower to communicate with windows vm",
            "tags": {
                "displayName": "Windows Agent VM Extension",
                "quickstartName": "[variables('quickstartTags').name]",
                "provider": "[variables('redHatTags').provider]"
            },
            "copy": {
                "name": "windowsAgentVmLoop",
                "count": "[parameters('windowsClientCount')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmWinAgentName'),copyIndex(1))]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://github.com/ansible/ansible/raw/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "powershell -ExecutionPolicy Bypass -File ConfigureRemotingForAnsible.ps1 "

                }
            }
        }

    ],
    "outputs": {
        "Ansible Tower DNS Name:": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressNameTower')), '2016-03-30').dnsSettings.fqdn]",
            "type": "string"
        },
        "Linux Client 01 Dns Name": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressNameLinAgent'),'1'))).dnsSettings.fqdn]",
            "type": "string"
        },
        "Windows Client 01 Dns Name": {
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses',concat(variables('publicIPAddressNameWinAgent'),'1'))).dnsSettings.fqdn]",
            "type": "string"
        },
        "VM Username": {
            "value": "[parameters('vmUsername')]",
            "type": "string"
        },
        "VM Password": {
            "value": "[parameters('vmPassword')]",
            "type": "string"
        }
    }
}
